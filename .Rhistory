premier(3)
premier(2)
premier <- function(n){
test = 0
for (i in 2:n-1){
if (n%%i==0){
test = 1
}
}
if (!test){
print(paste(n,"est un nombre premier",sep = " "))
}else{
print(paste(n,"n'est pas un nombre premier",sep = " "))
}
}
premier(2)
premier <- function(n){
test = 0
for (i in 2:n-1){
if (n%%i){
test = 1
}
}
if (!test){
print(paste(n,"est un nombre premier",sep = " "))
}else{
print(paste(n,"n'est pas un nombre premier",sep = " "))
}
}
premier(2)
premier <- function(n){
test = 0
for (i in 2:n-1){
if (n%%i==0){
print(paste(n,"n'est pas un nombre premier",sep = " "))
}
print(paste(n,"est un nombre premier",sep = " "))
}
}
premier <- function(p){
test = 0
for (i in 2:n-1){
if (p%%i==0){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}
print(paste(p,"est un nombre premier",sep = " "))
}
}
premier(2)
premier <- function(p){
test = 0
for (i in 2:p-1){
if (p%%i==0){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}
print(paste(p,"est un nombre premier",sep = " "))
}
}
premier(2)
premier <- function(p){
test = 0
for (i in 2:p-1){
if (p%%i==0){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))}
}
}
premier(2)
premier <- function(p){
test = 0
for (i in 2:(p-1)){
if (p%%i==0){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))}
}
}
premier(2)
premier <- function(p){
test = 0
t <- p-1
for (i in 2:t){
if (p%%i==0){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))}
}
}
premier(2)
premier <- function(p){
test = 0
t <- p-1
for (i in 2:t){
if (p%%i){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))}
}
}
premier(2)
premier(3)
sqrt(4)
help(for)
help("for")
premier <- function(p){
test = 0
lim <- sqrt(p) + 1
if (p %% 2){
test = 1
}else {
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
if (!test){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))
}
}
premier(3)
premier(2)
premier <- function(p){
test = 0
lim <- sqrt(p) + 1
if (p %% 2){
print('here')
test = 1
}else {
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
if (!test){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))
}
}
premier(2)
premier <- function(p){
test = 0
lim <- sqrt(p) + 1
if (p %% 2){
print('here')
test = 1
}else {
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
# if (!test){
#     print(paste(p,"n'est pas un nombre premier",sep = " "))
#   }else{
#     print(paste(p,"est un nombre premier",sep = " "))
# }
}
premier(2)
premier <- function(p){
test = 0
lim <- sqrt(p) + 1
if (p %% 2){
test = 1
}else if (!(p %%2)) {
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
if (!test){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))
}
}
premier(2)
premier(3)
premier(6)
premier <- function(p){
test = 0
lim <- sqrt(p) + 1
if (p %% 2){
test = 1
break
}else{
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
if (!test){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))
}
}
premier(6)
premier(1)
premier(2)
premier(2)
seq(3,3,by=2)
premier <- function(p){
test = 0
lim <- sqrt(p) + 1
if (p %% 2 || p == 1 || p==2){
test = 1
}else{
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
if (!test){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))
}
}
premier(2)
p = 2
if (p %% 2){
test = 1
}else{
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
if (!test){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))
}
test = 0
lim <- sqrt(p) + 1
if (p %% 2){
test = 1
}else{
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
if (!test){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))
}
if (p %% 2){
test = 1
}else{
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
2%%2
test = 0
lim <- sqrt(p) + 1
if (p %% 2==0){
test = 1
}else{
for(i in seq(3,lim,by=2)){
if (p %% i==0){
test=1
}
}
}
if (!test){
print(paste(p,"n'est pas un nombre premier",sep = " "))
}else{
print(paste(p,"est un nombre premier",sep = " "))
}
premier(2)
premier(4)
premier <- function(p){
test = 0
lim <- sqrt(p) + 1
if (p %% 2==0 ){
test = 1
}else{
for(i in seq(3,lim,by=2)){
if (p %% i==0){
test=1
}
}
}
if (!test){
print(paste(p,"est un nombre premier",sep = " "))
}else{
print(paste(p,"n'est pas un nombre premier",sep = " "))
}
}
premier(4)
premier(2)
if (p %% i){
test=1
}
premier <- function(p){
test = 0
lim <- sqrt(p) + 1
if (p %% 2){
test = 1
}else{
for(i in seq(3,lim,by=2)){
if (p %% i){
test=1
}
}
}
if (!test){
print(paste(p,"est un nombre premier",sep = " "))
}else{
print(paste(p,"n'est pas un nombre premier",sep = " "))
}
}
premier(2)
View(tea)
help(tea)
??tea
data(tea)
library(FactoMineR)
install.packages(FactoMineR)
install.packages("FactoMineR")
data(tea)
library(FactoMineR)
data(tea)
View(tea)
names(tea)
summary(tea)
rm(lm=list())
rm(lm=list())
rm(lm=list())
rm(list=ls())
help(setwd)
getwd()
help(getwd)
help(setwd)
hathutrang
"hathutrang"
cat("hathutrang \n")
cat("hathutrang \n")
help("cat")
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
cat("hathutrang", 310596 ,"\n")
paste("ha","thu","trang",sep=",")
paste("ha","thu","trang",sep="/")
paste("ha","thu","trang",sep=",")
paste("ha","thu","trang",sep=" ")
paste("ha","thu","trang",sep="/")
paste2("ha","thu","trang")
paste0("ha","thu","trang")
help(paste0)
paste("ha","thu","trang")
paste("ha","thu","trang",sep=",") #avec ,
paste("ha","thu","trang") #avec une espace
paste("ha","thu","trang",sep="/") #avec /
#paste pour concaténation avec séparateur choisi
paste0("ha","thu","trang")
#paste0("ha","thu","trang") est paste("ha","thu","trang",sep="")
paste("ha","thu","trang",sep=",") #avec ,
paste("ha","thu","trang") #avec une espace
paste("ha","thu","trang",sep="/") #avec /
#paste pour concaténation avec séparateur choisi
paste0("ha","thu","trang")
paste("ha","thu","trang",sep="")
#paste0("ha","thu","trang") est paste("ha","thu","trang",sep="")
ls()
user <- "hathutrang"
ls()
rm(user)
ls()
rm(iter)
user <- "hathutrang"
ls()
trang <- 310596
ngoc <- 290996
trang <- 310596
ngoc <- 290996
#pour les afficher:
trang
ngoc
trang <- 310596
ngoc <- 290996
#pour les afficher:
trang
ngoc
#les ; permettent de ne pas afficher cette ligne
trang
ngoc;
ngoc;
ngoc,
ngoc;
trang <- 310596
ngoc <- 290996
#pour les afficher:
trang
ngoc
a <- 4
b <- 2
a+b
a-b
a*b
a/b
a^b
log(10)
exp(1)
a < b
a < b
a > b
a != b
a & b
a | b
1:12
seq(1,10,2)
seq(1,10,length=8)
c <- c(a,b)
c
rm(c)
d
d <- c(a,b)
d
dim(f) <- c(2,5)
f <- 1:10
dim(f) <- c(2,5)
dim(f) <- c(5,2)
f
dim(f) <- c(2,5)
dim(f) <- c(2,5)
f
dim(f) <- c(5,2)
f
s <- matrix(1:15,nrow=5,ncol=3)
s
s <- matrix(1:15,nrow=5,ncol=3)
s
x <- matrix(1:15,nrow=3,ncol=5)
x
t<-c(3,-1,2,5,0,-12)
xmat <- matrix(x, ncol=2) # creer une matrice 2 colonnes a partir de vecteur t
xmatx<-matrix(x, ncol=2, byrow=T) # creer une matrice organisée par iigne a partir de vecteur t
rm(xmat,xmatx)
t<-c(3,-1,2,5,0,-12)
xmat <- matrix(x, ncol=2) # creer une matrice 2 colonnes a partir de vecteur t
xmatx<-matrix(x, ncol=2, byrow=T) # creer une matrice organisée par iigne a partir de vecteur t
t<-c(3,-1,2,5,0,-12)
xmat <- matrix(t, ncol=2) # creer une matrice 2 colonnes a partir de vecteur t
xmatx<-matrix(t, ncol=2, byrow=T) # creer une matrice organisée par iigne a partir de vecteur t
rm(xmat,xmatx)
t<-c(3,-1,2,5,0,-12)
xmat <- matrix(t, ncol=2) # creer une matrice 2 colonnes a partir de vecteur t
xmatx<-matrix(t, ncol=2, byrow=T) # creer une matrice organisée par iigne a partir de vecteur t
t<-c(3,-1,2,5,0,-12)
xmat <- matrix(t, ncol=2) # creer une matrice 2 colonnes a partir de vecteur t
xmat
xmatx<-matrix(t, ncol=2, byrow=T) # creer une matrice organisée par iigne a partir de vecteur t
xmatx
xmat[,2] #2eme colonne
xmat[c(1,3),]
dimnames(xmat)<-list(c("L1","L2","L3"),c("C1","C2"))
xmat
#par colonne
cbind(xmat, xmatx)
#par ligne
cbind(xmat, xmatx)
#par colonne
cbind(xmat, xmatx)
#par ligne
rbind(xmat, xmatx)
#dimension
dim(xmat)
#transposé
t(xmat)
#produit scalaire
xmat%*%t(xmat)
cnlp_init_corenlp()
library(cleanNLP)
cnlp_init_corenlp()
cnlp_init_spacy()
anno <- run_annotators(tf)
rm(list=ls())
setwd('Documents/Doc/Master2/Text Mining/Projet/')
library(tidytext)
install.packages("tidytext")
install.packages("tidytext")
library(tidytext)
## Or give the full path to the file
# udmodel_english <- udpipe_load_model(file = dl$file_model)
txt <- paste(a[1:50000],collapse = '\n')
# install.packages("dplyr")
library(udpipe)
## Either give a file in the current working directory
udmodel_english <- udpipe_load_model(file = "english-ud-2.0-170801.udpipe")
getwd()
setwd("/Users/jin/Documents/Doc/Master2/Advanced Supervised Learning/Project_ASL/")
## Either give a file in the current working directory
udmodel_english <- udpipe_load_model(file = "english-ud-2.0-170801.udpipe")
